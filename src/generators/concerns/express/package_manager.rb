module Tenant
  module ExpressPackageManager
    def create_package_json(db_type)
      # Base dependencies for Express application
      dependencies = {
        "express" => "^4.18.2",
        "body-parser" => "^1.20.2",
        "dotenv" => "^16.3.1",
        "cors" => "^2.8.5"
      }
      
      # Add database-specific dependencies
      case db_type.to_s.downcase
      when 'sequelize', 'sql', 'mysql', 'postgres', 'postgresql'
        dependencies["sequelize"] = "^6.35.1"
        dependencies["pg"] = "^8.11.3" # For PostgreSQL
        dependencies["pg-hstore"] = "^2.3.4" # For PostgreSQL
        # Add MySQL if needed
        dependencies["mysql2"] = "^3.6.5" if db_type.to_s.downcase == 'mysql'
      when 'prisma'
        dependencies["@prisma/client"] = "^5.6.0"
      else # Default to MongoDB
        dependencies["mongoose"] = "^8.0.1"
      end
      
      # Create package.json content
      package_json = {
        "name" => "express-app",
        "version" => "1.0.0",
        "description" => "Express application generated by Dwelling",
        "main" => @language.to_s.downcase == "typescript" ? "dist/app.js" : "app.js",
        "scripts" => {
          "start" => @language.to_s.downcase == "typescript" ? "node dist/app.js" : "node app.js",
          "dev" => @language.to_s.downcase == "typescript" ? "nodemon --exec ts-node src/app.ts" : "nodemon app.js"
        },
        "dependencies" => dependencies,
        "devDependencies" => {
          "nodemon" => "^3.0.1"
        }
      }
      
      # Add TypeScript-specific dependencies if TypeScript is selected
      if @language.to_s.downcase == "typescript"
        package_json["devDependencies"].merge!({
          "typescript" => "^5.3.2",
          "ts-node" => "^10.9.1",
          "@types/node" => "^20.10.0",
          "@types/express" => "^4.17.21",
          "@types/cors" => "^2.8.17",
          "@types/body-parser" => "^1.19.5"
        })
        
        # Add database-specific TypeScript types
        case db_type.to_s.downcase
        when 'sequelize', 'sql', 'mysql', 'postgres', 'postgresql'
          package_json["devDependencies"]["@types/sequelize"] = "^4.28.19"
          package_json["devDependencies"]["@types/pg"] = "^8.10.9" if ['postgres', 'postgresql'].include?(db_type.to_s.downcase)
          package_json["devDependencies"]["@types/mysql"] = "^2.15.24" if db_type.to_s.downcase == 'mysql'
        when 'prisma'
          # Prisma already includes TypeScript types
        else # Default to MongoDB
          package_json["devDependencies"]["@types/mongoose"] = "^5.11.97"
        end
        
        # Add build script for TypeScript
        package_json["scripts"]["build"] = "tsc"
        package_json["scripts"]["start"] = "node dist/app.js"
        package_json["scripts"]["dev"] = "nodemon --exec ts-node src/app.ts"
      end
      
      # Add database-specific dev dependencies
      if db_type.to_s.downcase == 'prisma'
        package_json["devDependencies"]["prisma"] = "^5.6.0"
      elsif ['sequelize', 'sql', 'mysql', 'postgres', 'postgresql'].include?(db_type.to_s.downcase)
        package_json["devDependencies"]["sequelize-cli"] = "^6.6.2"
      end
      
      # Write package.json file
      File.write("#{@express_path}/package.json", JSON.pretty_generate(package_json))
      
      # Create tsconfig.json if TypeScript is selected
      if @language.to_s.downcase == "typescript"
        create_tsconfig_json
      end
    end
    
    def create_tsconfig_json
      tsconfig = {
        "compilerOptions" => {
          "target" => "es2016",
          "module" => "commonjs",
          "outDir" => "./dist",
          "rootDir" => "./src",
          "strict" => true,
          "esModuleInterop" => true,
          "skipLibCheck" => true,
          "forceConsistentCasingInFileNames" => true,
          "resolveJsonModule" => true
        },
        "include" => ["src/**/*"],
        "exclude" => ["node_modules", "**/*.test.ts"]
      }
      
      File.write("#{@express_path}/tsconfig.json", JSON.pretty_generate(tsconfig))
    end
    
    def install_dependencies
      Dir.chdir(@express_path) do
        puts "Installing dependencies..."
        system("npm install")
      end
    end
    
    def initialize_prisma
      Dir.chdir(@express_path) do
        puts "Initializing Prisma..."
        system("npx prisma init")
      end
    end
    
    def initialize_sequelize
      Dir.chdir(@express_path) do
        puts "Initializing Sequelize..."
        system("npx sequelize-cli init")
      end
    end
  end
end 